/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein is
 * confidential and proprietary to MediaTek Inc. and/or its licensors. Without
 * the prior written permission of MediaTek inc. and/or its licensors, any
 * reproduction, modification, use or disclosure of MediaTek Software, and
 * information contained herein, in whole or in part, shall be strictly
 * prohibited.
 *
 * MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER
 * ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
 * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR
 * NONINFRINGEMENT. NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH
 * RESPECT TO THE SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY,
 * INCORPORATED IN, OR SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES
 * TO LOOK ONLY TO SUCH THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO.
 * RECEIVER EXPRESSLY ACKNOWLEDGES THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO
 * OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES CONTAINED IN MEDIATEK
 * SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE
 * RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S
 * ENTIRE AND CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE
 * RELEASED HEREUNDER WILL BE, AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE
 * MEDIATEK SOFTWARE AT ISSUE, OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE
 * CHARGE PAID BY RECEIVER TO MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek
 * Software") have been modified by MediaTek Inc. All revisions are subject to
 * any receiver's applicable license agreements with MediaTek Inc.
 */

#ifndef _MTK_HARDWARE_INCLUDE_MTKCAM_DEVICE_IEXTERNALMODULE_H_
#define _MTK_HARDWARE_INCLUDE_MTKCAM_DEVICE_IEXTERNALMODULE_H_
//
#include <utils/Errors.h>
#include <utils/StrongPointer.h>
//
#include <hardware/camera_common.h>
#include <mtkcam/common.h>
//
#include "IExternalDevice.h"

/******************************************************************************
 *
 ******************************************************************************/
namespace NSCam {


/******************************************************************************
 *
 ******************************************************************************/
class IExternalDevice;
class IExternalDeviceListener;


/******************************************************************************
 *
 ******************************************************************************/
class IExternalModule
{
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//  Instantiation.
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
protected:  ////                        Destructor.

    //  Disallowed to directly delete a raw pointer.
    virtual                             ~IExternalModule() {};

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//  Interfaces.
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
public:     ////

    /**
     * DirectRenderer use the API to get IExternalDeviceListener.
     *
     * @return
     *      pointer of IExternalDeviceListener.
     */
    virtual const android::sp< IExternalDeviceListener >&   getListener ()              = 0;

};

class IExternalDeviceListener
     : public android::IInterface
{
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//  Interfaces.
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
public:     ////                Operations.
    DECLARE_META_INTERFACE(ExternalDeviceListener);
    /**
     * Create an instance.
     */
    //static  IExternalDeviceListener* create();

    /**
     * DirectRenderer call this API once there is a new external
     * device connected.
     *
     * @param[in] deviceID  : ID for new connected device.
     *                        Generated by DirectRenderer.
     * @param[in] device    : pointer to IExternalDevice ( new connected external device).
     * @param[in] info      : pointer to CameraInfo ( new connected external device's information).
     * @param[out] remoteID : ID for new connected device.
     *                        Generated by camera HAL. This ID should be the ID when AP open camera.
     *
     * @return
     *      0 indicates success; otherwise failure.
     */
    virtual android::status_t  onConnected ( int32_t deviceID ,
                                             android::sp< IExternalDevice > device ,
                                             CameraInfo* info,
                                             int32_t& remoteID
                                            )                                           = 0;

    /**
     * DirectRenderer call this API once there is a new external
     * device disconnected.
     *
     * @param[in] deviceID : ID for disconnected device. Given by DirectRenderer.
     *
     * @return
     *      0 indicates success; otherwise failure.
     */
    virtual android::status_t  onDisconnected ( int32_t deviceID )                    = 0;
};


/******************************************************************************
 *
 ******************************************************************************/
class BnExternalDeviceListener
    : public android::BnInterface< IExternalDeviceListener >
{
public:
    virtual android::status_t    onTransact( uint32_t code,
                                             const android::Parcel& data,
                                             android::Parcel* reply,
                                             uint32_t flags = 0);
};

};  //namespace NSCam

extern "C"
NSCam::IExternalModule* getExternalModule();

#endif  //_MTK_HARDWARE_INCLUDE_MTKCAM_DEVICE_IEXTERNALMODULE_H_

